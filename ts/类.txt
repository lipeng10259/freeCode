公共，私有与受保护的修饰符

    默认为 public

        在上面的例子里，我们可以自由的访问程序里定义的成员。 如果你对其它语言中的类比较了解，
        就会注意到我们在之前的代码里并没有使用 public来做修饰；例如，C#要求必须明确地使用 public指定成员是可见的。 
        在TypeScript里，成员都默认为 public。

        class Animal {
            public name: string;
            public constructor(theName: string) { this.name = theName; }
            public move(distanceInMeters: number) {
                console.log(`${this.name} moved ${distanceInMeters}m.`);
            }
        }
    
    理解 private

        当成员被标记成 private时，它就不能在声明它的类的外部访问,只能在基类内部访问

            class Animal {
                private name: string ;
                constructor(theName: string) {

                    this.name = theName; 

                    console.log(this.name);  

                }
            }

            let animal =new Animal("Cat")   
            // animal.name; // 错误: 'name' 是私有的.

    
    理解 protected
    
        protected修饰符与 private修饰符的行为很相似，但有一点不同， protected成员在派生类中仍然可以访问。

        构造函数也可以被标记成 protected

            class Person {
                protected name: string;
                constructor(name: string) { this.name = name; }
            }

            class Employee extends Person {
                private department: string;

                constructor(name: string, department: string) {
                    super(name)
                    this.department = department;
                }

                public getElevatorPitch() {
                    return `Hello, my name is ${this.name} and I work in ${this.department}.`;
                }
            }

            let howard = new Employee("Howard", "Sales");

            console.log(howard.getElevatorPitch());

            console.log(howard.name); // 错误  

    readonly修饰符

        你可以使用 readonly关键字将属性设置为只读的。 只读属性必须在声明时或构造函数里被初始化。

            class Octopus {
                readonly name: string;
                readonly numberOfLegs: number = 8;
                constructor (theName: string) {
                    this.name = theName;
                }
            }
            let dad = new Octopus("Man with the 8 strong legs");
            dad.name = "Man with the 3-piece suit"; // 错误! name 是只读的.        
   
    参数属性    

        class Octopus {
            readonly numberOfLegs: number = 8;
            constructor(readonly name: string) {
            }
        }

        class Animal {
            constructor(private name: string,protected age:number) {

                // this.name = theName; 

                console.log(this.name,this.age);  

            }
        }

        let animal =new Animal("Cat",15) 

        仅在构造函数里使用 readonly name: string参数来创建和初始化 name成员。 我们把声明和赋值合并至一处。

    存取器

        TypeScript支持通过getters/setters来截取对对象成员的访问。 它能帮助你有效的控制对对象成员的访问

        let passcode = "secret passcode";

        class Employee {
            private _fullName: string;

            get fullName(): string {
                return this._fullName;
            }

            set fullName(newName: string) {
                if (passcode && passcode == "secret passcode") {
                    this._fullName = newName;
                }
                else {
                    console.log("Error: Unauthorized update of employee!");
                }
            }
        }

        let employee = new Employee();
        employee.fullName = "Bob Smith";
        if (employee.fullName) {
            alert(employee.fullName);
        }

    静态属性
    
        我们使用 static定义 origin。 每个实例想要访问这个属性的时候，都要在 origin前面加上类名。 
        如同在实例属性上使用 this.前缀来访问属性一样，这里我们使用 Grid.来访问静态属性。

            class Grid {
            static origin = {x: 0, y: 0};
            calculateDistanceFromOrigin(point: {x: number; y: number;}) {
                let xDist = (point.x - Grid.origin.x);
                let yDist = (point.y - Grid.origin.y);
                return Math.sqrt(xDist * xDist + yDist * yDist) / this.scale;
            }
            constructor (public scale: number) { }
        }

        let grid1 = new Grid(1.0);  // 1x scale
        let grid2 = new Grid(5.0);  // 5x scale

        console.log(grid1.calculateDistanceFromOrigin({x: 10, y: 10}));
        console.log(grid2.calculateDistanceFromOrigin({x: 10, y: 10}));

    抽象类

        抽象类做为其它派生类的基类使用。 它们一般不会直接被实例化。 不同于接口，抽象类可以包含成员的实现细节。 
        abstract关键字是用于定义抽象类和在抽象类内部定义抽象方法。

            abstract class Animal {
                abstract makeSound(): void;
                move(): void {
                    console.log('roaming the earch...');
                }
            }

        抽象类中的抽象方法不包含具体实现并且必须在派生类中实现。 抽象方法的语法与接口方法相似。 
        两者都是定义方法签名但不包含方法体。 然而，抽象方法必须包含 abstract关键字并且可以包含访问修饰符。

            abstract class Department {

                constructor(public name: string) {
                }

                printName(): void {
                    console.log('Department name: ' + this.name);
                }

                abstract printMeeting(): void; // 必须在派生类中实现
            }

            class AccountingDepartment extends Department {

                constructor() {
                    super('Accounting and Auditing'); // 在派生类的构造函数中必须调用 super()
                }

                printMeeting(): void {
                    console.log('The Accounting Department meets each Monday at 10am.');
                }

                generateReports(): void {
                    console.log('Generating accounting reports...');
                }
            }

            let department: Department; // 允许创建一个对抽象类型的引用
            department = new Department(); // 错误: 不能创建一个抽象类的实例
            department = new AccountingDepartment(); // 允许对一个抽象子类进行实例化和赋值
            department.printName();
            department.printMeeting();
            department.generateReports(); // 错误: 方法在声明的抽象类中不存在