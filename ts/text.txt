
接口

TypeScript的核心原则之一是对值所具有的结构进行类型检查

    我们只会去关注值的外形。 只要传入的对象满足上面提到的必要条件，那么它就是被允许的

    可选属性

        接口里的属性不全都是必需的。 有些是只在某些条件下存在，或者根本不存在。 可选属性在应用“option bags”模式时很常用，即给函数传入的参数对象中只有部分属性赋值了
        
        接口里面的数据类型在传参的时候，可以比接口少，但是不能比接口数据多

        带有可选属性的接口与普通的接口定义差不多，只是在可选属性名字定义的后面加一个?符号

        interface SquareConfig {
            height: number;
            color?: string;
            width?: number;
        }

    只读属性
    
        一些对象属性只能在对象刚刚创建的时候修改其值。 你可以在属性名前用 readonly来指定只读属性（只读属性在初始化数值之后 无法再次修改）:

            interface Point {
                readonly x: number;
                readonly y: number;
            }

            let p1: Point = { x: 10, y: 20 };

            p1.x = 5; // error!

        readonly vs const
        
            最简单判断该用readonly还是const的方法是看要把它做为变量使用还是做为一个属性。 做为变量使用的话用 const，若做为属性则使用readonly。


    函数类型

        接口能够描述JavaScript中对象拥有的各种各样的外形。 除了描述带有属性的普通对象外，接口也可以描述函数类型。

        为了使用接口表示函数类型，我们需要给接口定义一个调用签名。 它就像是一个只有参数列表和返回值类型的函数定义。参数列表里的每个参数都需要名字和类型。

            interface SearchFunc {
                (source: string, subString: string): boolean;
            }

        这样定义后，我们可以像使用其它接口一样使用这个函数类型的接口。 下例展示了如何创建一个函数类型的变量，并将一个同类型的函数赋值给这个变量。

            let mySearch: SearchFunc;

            mySearch = function(source: string, subString: string) {

                let result = source.search(subString);
                
                return result > -1;

            }

        对于函数类型的类型检查来说，函数的参数名不需要与接口里定义的名字相匹配。

    可索引的类型

        与使用接口描述函数类型差不多，我们也可以描述那些能够“通过索引得到”的类型，比如a[10]或ageMap["daniel"]。 可索引类型具有一个 索引签名，它描述了对象索引的类型，还有相应的索引返回值类型。 让我们看一个例子：

            interface StringArray {
                [index: number]: string;
            }

            let myArray: StringArray;
            myArray = ["Bob", "Fred"];

            let myStr: string = myArray[0];

        TypeScript支持两种索引签名：字符串和数字。 可以同时使用两种类型的索引，但是数字索引的返回值必须是字符串索引返回值类型的子类型。 这是因为当使用 number来索引时，JavaScript会将它转换成string然后再去索引对象。 也就是说用 100（一个number）去索引等同于使用"100"（一个string）去索引，因此两者需要保持一致。



    类类型

        实现接口

        与C#或Java里接口的基本作用一样，TypeScript也能够用它来明确的强制一个类去符合某种契约。

            interface ClockInterface {
                currentTime: Date;
            }

            class Clock implements ClockInterface {
                currentTime: Date;
                constructor(h: number, m: number) { }
            }

        你也可以在接口中描述一个方法，在类里实现它，如同下面的setTime方法一样：

            interface ClockInterface {
                currentTime: Date;
                setTime(d: Date);
            }

            class Clock implements ClockInterface {
                currentTime: Date;
                setTime(d: Date) {
                    this.currentTime = d;
                }
                constructor(h: number, m: number) { }
            }
        接口描述了类的公共部分，而不是公共和私有两部分。 它不会帮你检查类是否具有某些私有成员。

    继承接口
        和类一样，接口也可以相互继承。 这让我们能够从一个接口里复制成员到另一个接口里，可以更灵活地将接口分割到可重用的模块里。

            interface Shape {
                color: string;
            }

            interface Square extends Shape {
                sideLength: number;
            }

            let square = <Square>{};
            square.color = "blue";
            square.sideLength = 10;


枚举

使用枚举可以定义一些有名字的数字常量，枚举类型会被编译成一个双向映射的对象