    泛型
        介绍
            组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型。

                function identity<T>(arg: T): T {
                    return arg;
                }

                function loggingIdentity<T>(arg: Array<T>): Array<T> {

                    console.log(arg.length);  // Array has a .length, so no more error

                    return arg;

                }
            
            使用any类型会导致这个函数可以接收任何类型的arg参数，这样就丢失了一些信息：
            传入的类型与返回的类型应该是相同的。如果我们传入一个数字，我们只知道任何类型的值都有可能被返回。

        使用泛型变量

            使用泛型创建像identity这样的泛型函数时，编译器要求你在函数体必须正确的使用这个通用的类型。 
            换句话说，你必须把这些参数当做是任意或所有类型。

            看下之前identity例子：

                function identity<T>(arg: T): T {
                    return arg;
                }

            如果我们想同时打印出arg的长度。 我们很可能会这样做：

                function loggingIdentity<T>(arg: T): T {
                    console.log(arg.length);  // Error: T doesn't have .length
                    return arg;
                }
        
        泛型类型


            泛型函数的类型与非泛型函数的类型没什么不同，只是有一个类型参数在最前面，像函数声明一样：

                function identity<T>(arg: T): T {
                    return arg;
                }

                let myIdentity: <T>(arg: T) => T = identity;

            我们也可以使用不同的泛型参数名，只要在数量上和使用方式上能对应上就可以。

                function identity<T>(arg: T): T {
                    return arg;
                }

                let myIdentity: <U>(arg: U) => U = identity;


            我们还可以使用带有调用签名的对象字面量来定义泛型函数：

                function identity<T>(arg: T): T {
                    return arg;
                }

                let myIdentity: {<T>(arg: T): T} = identity;

            这引导我们去写第一个泛型接口了。 我们把上面例子里的对象字面量拿出来做为一个接口：

                interface GenericIdentityFn {
                    <T>(arg: T): T;
                }

                function identity<T>(arg: T): T {
                    return arg;
                }

                let myIdentity: GenericIdentityFn = identity;

            一个相似的例子，我们可能想把泛型参数当作整个接口的一个参数。 这样我们就能清楚的知道使用的具体是哪个泛型类型（比如： Dictionary<string>而不只是Dictionary）。 这样接口里的其它成员也能知道这个参数的类型了。

                interface GenericIdentityFn<T> {
                    (arg: T): T;
                }

                function identity<T>(arg: T): T {
                    return arg;
                }

                let myIdentity: GenericIdentityFn<number> = identity;


        泛型类

            泛型类看上去与泛型接口差不多。 泛型类使用（ <>）括起泛型类型，跟在类名后面。

                class GenericNumber<T> {

                    zeroValue: T;

                    add: (x: T, y: T) => T;

                }

                let myGenericNumber = new GenericNumber<number>();

                myGenericNumber.zeroValue = 0;

                myGenericNumber.add = function(x, y) { return x + y; };

            GenericNumber类的使用是十分直观的，并且你可能已经注意到了，没有什么去限制它只能使用number类型。 也可以使用字符串或其它更复杂的类型。

                let stringNumeric = new GenericNumber<string>();

                stringNumeric.zeroValue = "";

                stringNumeric.add = function(x, y) { return x + y; };

                console.log(stringNumeric.add(stringNumeric.zeroValue, "test"));

            我们在类那节说过，类有两部分：静态部分和实例部分。 泛型类指的是实例部分的类型，所以类的静态属性不能使用这个泛型类型。
        
        在泛型约束中使用类型参数

            你可以声明一个类型参数，且它被另一个类型参数所约束。 比如，现在我们想要用属性名从对象里获取这个属性。 
            并且我们想要确保这个属性存在于对象 obj上，因此我们需要在这两个类型之间使用约束。

                function getProperty(obj: T, key: K) {
                    return obj[key];
                }

                let x = { a: 1, b: 2, c: 3, d: 4 };

                getProperty(x, "a"); // okay
                getProperty(x, "m"); // error: Argument of type 'm' isn't assignable to 'a' | 'b' | 'c' | 'd'.   

        在泛型里使用类类型
            在TypeScript使用泛型创建工厂函数时，需要引用构造函数的类类型。比如，

            function create<T>(c: {new(): T; }): T {
                return new c();
            }
            一个更高级的例子，使用原型属性推断并约束构造函数与类实例的关系。

            class BeeKeeper {
                hasMask: boolean;
            }

            class ZooKeeper {
                nametag: string;
            }

            class Animal {
                numLegs: number;
            }

            class Bee extends Animal {
                keeper: BeeKeeper;
            }

            class Lion extends Animal {
                keeper: ZooKeeper;
            }

            function createInstance<A extends Animal>(c: new () => A): A {
                return new c();
            }

            createInstance(Lion).keeper.nametag;  // typechecks!
            createInstance(Bee).keeper.hasMask;   // typechecks!