let , const

    不存在变量提升
        var命令会发生“变量提升”现象，即变量可以在声明之前使用，值为undefined
        为了纠正这种现象，let命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错
    暂时性死区
        只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。
    不允许重复声明
        let不允许在相同作用域内，重复声明同一个变量。
    块级作用域

    块级作用域与函数声明
        函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明

    const 命令
        const声明一个只读的常量。一旦声明，常量的值就不能改变。

字符串的扩展
    实例方法：includes(), startsWith(), endsWith()
        includes()：返回布尔值，表示是否找到了参数字符串。
        startsWith()：返回布尔值，表示参数字符串是否在原字符串的头部。
        endsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部。
    实例方法：repeat()
        repeat方法返回一个新字符串，表示将原字符串重复n次。
            
            'x'.repeat(3) // "xxx"
            
            参数如果是小数，会被取整(向下取整)
            如果repeat的参数是负数或者Infinity，会报错。
            但是，如果参数是 0 到-1 之间的小数，则等同于 0，这是因为会先进行取整运算。0 到-1 之间的小数，取整以后等于-0，repeat视同为 0。
        实例方法：padStart()，padEnd()
            如果某个字符串不够指定长度，会在头部或尾部补全。padStart()用于头部补全，padEnd()用于尾部补全
                'x'.padStart(5, 'ab') // 'ababx'
            如果省略第二个参数，默认使用空格补全长度。
                'x'.padStart(4) // '   x'
        实例方法：trimStart()，trimEnd() 
            const s = '  abc  ';
            s.trim() // "abc"
            s.trimStart() // "abc  "
            s.trimEnd() // "  abc"
    实例方法：replaceAll()
        历史上，字符串的实例方法replace()只能替换第一个匹配。
            'aabbcc'.replace(/b/g, '_')// 'aa__cc'

数值的扩展
    Number.isInteger()
        Number.isInteger()用来判断一个数值是否为整数。
            Number.isInteger(25) // true
            Number.isInteger(25.1) // false
    Math 对象的扩展
        Math.trunc()
            Math.trunc方法用于去除一个数的小数部分，返回整数部分。
            Math.trunc(4.1) // 4

    Math.sign()
        Math.sign方法用来判断一个数到底是正数、负数、还是零。对于非数值，会先将其转换为数值。
            它会返回五种值。

            参数为正数，返回+1；
            参数为负数，返回-1；
            参数为 0，返回0；
            参数为-0，返回-0;
            其他值，返回NaN。
    Math.cbrt()
        Math.cbrt()方法用于计算一个数的立方根。
            Math.cbrt(-1) // -1
            Math.cbrt(0)  // 0
            Math.cbrt(1)  // 1
            Math.cbrt(2)  // 1.2599210498948732
    Math.hypot()
        Math.hypot方法返回所有参数的平方和的平方根。
            Math.hypot(3, 4);        // 5

函数的扩展
    箭头函数
        基本用法
        ES6 允许使用“箭头”（=>）定义函数。
            var f = v => v;

            // 等同于
            var f = function (v) {
            return v;
            };
    name 属性
        函数的name属性，返回该函数的函数名。
            function foo() {}
            foo.name // "foo"
        
        箭头函数有几个使用注意点。

            （1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。

            （2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。

            （3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。

            （4）不可以使用yield命令，因此箭头函数不能用作 Generator 函数。
    尾调用优化
        什么是尾调用？
            尾调用（Tail Call）是函数式编程的一个重要概念，本身非常简单，一句话就能说清楚，就是指某个函数的最后一步是调用另一个函数。
                function f(x){
                    return g(x);
                }
            尾调用不一定出现在函数尾部，只要是最后一步操作即可。
                function f(x) {
                    if (x > 0) {
                        return m(x)
                    }
                    return n(x);
                }

数组的扩展
    扩展运算符
        扩展运算符（spread）是三个点（...）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。
            console.log(...[1, 2, 3]) // 1 2 3
            console.log(1, ...[2, 3, 4], 5)// 1 2 3 4 5
            [...document.querySelectorAll('div')]// [<div>, <div>, <div>]
        替代函数的 apply 方法
            由于扩展运算符可以展开数组，所以不再需要apply方法，将数组转为函数的参数了。
                // ES5 的写法
                function f(x, y, z) {
                // ...
                }
                var args = [0, 1, 2];
                f.apply(null, args);

                // ES6的写法
                function f(x, y, z) {
                // ...
                }
                let args = [0, 1, 2];
                f(...args);
    扩展运算符的应用
        （1）复制数组
            数组是复合的数据类型，直接复制的话，只是复制了指向底层数据结构的指针，而不是克隆一个全新的数组
            ES5 只能用变通方法来复制数组。
                const a1 = [1, 2];
                const a2 = a1.concat();
                a2[0] = 2;
                a1 // [1, 2]
        （2）合并数组
            扩展运算符提供了数组合并的新写法。

            const arr1 = ['a', 'b'];
            const arr2 = ['c'];
            const arr3 = ['d', 'e'];

            // ES5 的合并数组
            arr1.concat(arr2, arr3);
            // [ 'a', 'b', 'c', 'd', 'e' ]

            // ES6 的合并数组
            [...arr1, ...arr2, ...arr3]
            // [ 'a', 'b', 'c', 'd', 'e' ]
            不过，这两种方法都是浅拷贝
        （3）与解构赋值结合
            扩展运算符可以与解构赋值结合起来，用于生成数组。
                const [first, ...rest] = [1, 2, 3, 4, 5];
                    first // 1
                    rest  // [2, 3, 4, 5]
        （4）字符串
            扩展运算符还可以将字符串转为真正的数组。
            [...'hello']
            // [ "h", "e", "l", "l", "o" ]
        （5）实现了 Iterator 接口的对象
            任何定义了遍历器（Iterator）接口的对象（参阅 Iterator 一章），都可以用扩展运算符转为真正的数组。
            let nodeList = document.querySelectorAll('div');
            let array = [...nodeList]
    Array.from()
        Array.from方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）。
        下面是一个类似数组的对象，Array.from将它转为真正的数组。
            let arrayLike = {
                '0': 'a',
                '1': 'b',
                '2': 'c',
                length: 3
            };
            // ES5的写法
            var arr1 = [].slice.call(arrayLike); // ['a', 'b', 'c']
            // ES6的写法
            let arr2 = Array.from(arrayLike); // ['a', 'b', 'c']
    Array.of()
        Array.of()方法用于将一组值，转换为数组。

        Array.of(3, 11, 8) // [3,11,8]
        Array.of(3) // [3]
        Array.of(3).length // 1
    数组实例的 copyWithin()
        数组实例的copyWithin()方法，在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。也就是说，使用这个方法，会修改当前数组。
        Array.prototype.copyWithin(target, start = 0, end = this.length)

    数组实例的 find() 和 findIndex()
        数组实例的find方法，用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为true的成员，然后返回该成员。如果没有符合条件的成员，则返回undefined。
            [1, 4, -5, 10].find((n) => n < 0)// -5
        数组实例的findIndex方法的用法与find方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。
    数组实例的 fill()
        fill方法使用给定值，填充一个数组。
            ['a', 'b', 'c'].fill(7)
            // [7, 7, 7]

            new Array(3).fill(7)
            // [7, 7, 7]
            上面代码表明，fill方法用于空数组的初始化非常方便。数组中已有的元素，会被全部抹去。

            fill方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。

            ['a', 'b', 'c'].fill(7, 1, 2)
            // ['a', 7, 'c']
            上面代码表示，fill方法从 1 号位开始，向原数组填充 7，到 2 号位之前结束。

            注意，如果填充的类型为对象，那么被赋值的是同一个内存地址的对象，而不是深拷贝对象。

            let arr = new Array(3).fill({name: "Mike"});
            arr[0].name = "Ben";
            arr
            // [{name: "Ben"}, {name: "Ben"}, {name: "Ben"}]

            let arr = new Array(3).fill([]);
            arr[0].push(5);
            arr
            // [[5], [5], [5]]
    数组实例的 entries()，keys() 和 values()
        ES6 提供三个新的方法——entries()，keys()和values()——用于遍历数组。它们都返回一个遍历器对象（详见《Iterator》一章），可以用for...of循环进行遍历，唯一的区别是keys()是对键名的遍历、values()是对键值的遍历，entries()是对键值对的遍历。
            for (let index of ['a', 'b'].keys()) {
            console.log(index);
            }
            // 0
            // 1

            for (let elem of ['a', 'b'].values()) {
            console.log(elem);
            }
            // 'a'
            // 'b'

            for (let [index, elem] of ['a', 'b'].entries()) {
            console.log(index, elem);
            }
            // 0 "a"
            // 1 "b"
            如果不使用for...of循环，可以手动调用遍历器对象的next方法，进行遍历。

            let letter = ['a', 'b', 'c'];
            let entries = letter.entries();
            console.log(entries.next().value); // [0, 'a']
            console.log(entries.next().value); // [1, 'b']
            console.log(entries.next().value); // [2, 'c']      
    数组实例的 includes()
        Array.prototype.includes方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的includes方法类似
        该方法的第二个参数表示搜索的起始位置，默认为0。如果第二个参数为负数，则表示倒数的位置，如果这时它大于数组长度（比如第二个参数为-4，但数组长度为3），则会重置为从0开始。
            [1, 2, 3].includes(3, 3);  // false
            [1, 2, 3].includes(3, -1); // true
    数组实例的 flat()，flatMap()
        数组的成员有时还是数组，Array.prototype.flat()用于将嵌套的数组“拉平”，变成一维的数组。该方法返回一个新数组，对原数据没有影响。
            [1, 2, [3, 4]].flat()
            // [1, 2, 3, 4]
            [1, 2, [3, [4, 5]]].flat()
            // [1, 2, 3, [4, 5]]

            [1, 2, [3, [4, 5]]].flat(2)
            // [1, 2, 3, 4, 5]
        flatMap()方法对原数组的每个成员执行一个函数（相当于执行Array.prototype.map()），然后对返回值组成的数组执行flat()方法。该方法返回一个新数组，不改变原数组。
            // 相当于 [[2, 4], [3, 6], [4, 8]].flat()
            [2, 3, 4].flatMap((x) => [x, x * 2])
            // [2, 4, 3, 6, 4, 8]
    数组的空位
        数组的空位指，数组的某一个位置没有任何值。比如，Array构造函数返回的数组都是空位。

        Array(3) // [, , ,]
        上面代码中，Array(3)返回一个具有 3 个空位的数组。

        注意，空位不是undefined，一个位置的值等于undefined，依然是有值的。空位是没有任何值，in运算符可以说明这一点。

        0 in [undefined, undefined, undefined] // true
        0 in [, , ,] // false
    Array.prototype.sort() 的排序稳定性
        排序稳定性（stable sorting）是排序算法的重要属性，指的是排序关键字相同的项目，排序前后的顺序不变。

            const arr = [
            'peach',
            'straw',
            'apple',
            'spork'
            ];

            const stableSorting = (s1, s2) => {
            if (s1[0] < s2[0]) return -1;
            return 1;
            };

            arr.sort(stableSorting)
            // ["apple", "peach", "straw", "spork"]
            上面代码对数组arr按照首字母进行排序。排序结果中，straw在spork的前面，跟原始顺序一致，所以排序算法stableSorting是稳定排序。

            const unstableSorting = (s1, s2) => {
            if (s1[0] <= s2[0]) return -1;
            return 1;
            };

            arr.sort(unstableSorting)
            // ["apple", "peach", "spork", "straw"]

Symbol 
    Symbol 是js的第七种数据类型，他表示一个独一无二的值，
    生成函数为 Symbol(),无法用 new 方法生成，他是一个类字符串的数据类型
    他的作用是防止属性名的冲突
    Symbol的值无法和其他数据类型进行运算
    Symbol的值可以转为字符串
    Symbol的值可以转为Boolean，不能转为Number
    Symbol的值可以属性，防止与对象的其他属性冲突(作为属性不能用点语法获取属性的值，用 obj[Symbol]的方法)
    Symbol.prototype.description：获取 Symbol 的描述 
        let s = Symbol()
        let s1 = Symbol('des') // 添加 Symbol 描述
        let sObject= Symbol({a:1}) // 对象先调用toString方法转为字符串
        s.toString() // 'Symbol()
        let a = {}
        a[s] = 1
    Symbol 属性名的获取
        Symbol 无法通过 Object.getOwnProptyNames(obj) 获取对象的常规属性名
        获取方法 Object.getOwnProptySymbols(obj) 只能获取对象以Symbol为属性名
        Reflect.ownKeys(obj) 可以获取常规对象属性和Symbol类型的属性(返回一个数组)
    由于以 Symbol 值作为键名，不会被常规方法遍历得到。我们可以利用这个特性，
    为对象定义一些非私有的、但又希望只用于内部的方法。
    Symbol 内置方法 
        Symbol.hasInstance
           对象的Symbol.hasInstance属性，指向一个内部方法。
           当其他对象使用instanceof运算符，判断是否为该对象的实例时，会调用这个方法。
            class MyClass {
                [Symbol.hasInstance](foo) {
                    return foo instanceof Array;
                }
            }
            [1, 2, 3] instanceof new MyClass() // true
        Symbol.isConcatSpreadable
            对象的Symbol.isConcatSpreadable属性等于一个布尔值，
            表示该对象用于Array.prototype.concat()时，是否可以展开。
                let arr1 = ['c', 'd'];
                ['a', 'b'].concat(arr1, 'e') // ['a', 'b', 'c', 'd', 'e']
                arr1[Symbol.isConcatSpreadable] // undefined

                let arr2 = ['c', 'd'];
                arr2[Symbol.isConcatSpreadable] = false;
                ['a', 'b'].concat(arr2, 'e') // ['a', 'b', ['c','d'], 'e']


    Symbol.for()方法 // 
        定义一个Symbol类型的值(接收一个字符串作为参数)，如果已注册到全局就返回这个值，
        如果没有就创建一个新的Symbol值，并注册到全局
            let symbol1 = Symbol.for('foo')
            let symbol2 = Symbol.for('foo')
            symbol1 === symbol2 // true
        Symbol.for()为 Symbol 值登记的名字，是全局环境的，不管有没有在全局环境运行。
            function foo() {
            return Symbol.for('bar');
            }
            const x = foo();
            const y = Symbol.for('bar');
            console.log(x === y); // true
        Symbol.keyFor()方法返回一个已登记的 Symbol 类型值的key。
            let s1 = Symbol.for("foo");
            Symbol.keyFor(s1) // "foo"
            let s2 = Symbol("foo");
            Symbol.keyFor(s2) // undefined

Promise 对象
    Promise 是异步编程的一种解决方案,Promise对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数;
        （1）对象的状态不受外界影响,只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。
        （2）一旦状态改变，就不会再变，任何时候都可以得到这个结果
    Promise也有一些缺点。
        首先，无法取消Promise，一旦新建它就会立即执行，无法中途取消。
        其次，如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。
        第三，当处于pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。
    Promise.prototype.then()
        Promise 实例具有then方法，它的作用是为 Promise 实例添加状态改变时的回调函数。
        then方法的第一个参数是resolved状态的回调函数，第二个参数是rejected状态的回调函数，它们都是可选的。
        then方法返回的是一个新的Promise实例（注意，不是原来那个Promise实例）。因此可以采用链式写法，即then方法后面再调用另一个then方法。
    Promise.prototype.catch()
        Promise.prototype.catch()方法是.then(null, rejection)或.then(undefined, rejection)的别名，用于指定发生错误时的回调函数。
    Promise.prototype.finally()
        finally()方法用于指定不管 Promise 对象最后状态如何，都会执行的操作,finally方法的回调函数不接受任何参数
    Promise.all()
        Promise.all()方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。
            const p = Promise.all([p1, p2, p3]);
        Promise.all()方法的参数可以不是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例。
        p的状态由p1、p2、p3决定，分成两种情况。

            （1）只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。

            （2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。

    Promise.race()
        Promise.race()方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。
            const p = Promise.race([p1, p2, p3]);
            上面代码中，只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。
        下面是一个例子，如果指定时间内没有获得结果，就将 Promise 的状态变为reject，否则变为resolve。
            const p = Promise.race([
            fetch('/resource-that-may-take-a-while'),
            new Promise(function (resolve, reject) {
                setTimeout(() => reject(new Error('request timeout')), 5000)
            })
            ]);

            p
            .then(console.log)
            .catch(console.error);
    Promise.allSettled()
        Promise.allSettled()方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例。只有等到所有这些参数实例都返回结果，不管是fulfilled还是rejected，包装实例才会结束。该方法由 ES2020 引入。
            const promises = [
                fetch('/api-1'),
                fetch('/api-2'),
                fetch('/api-3'),
            ];
            await Promise.allSettled(promises);
            removeLoadingIndicator();
            上面代码对服务器发出三个请求，等到三个请求都结束，不管请求成功还是失败，加载的滚动图标就会消失。
            该方法返回的新的 Promise 实例，一旦结束，状态总是fulfilled，不会变成rejected。状态变成fulfilled后，Promise 的监听函数接收到的参数是一个数组，每个成员对应一个传入Promise.allSettled()的 Promise 实例。

                const resolved = Promise.resolve(42);
                const rejected = Promise.reject(-1);

                const allSettledPromise = Promise.allSettled([resolved, rejected]);

                allSettledPromise.then(function (results) {
                console.log(results);
                });
                // [
                //    { status: 'fulfilled', value: 42 },
                //    { status: 'rejected', reason: -1 }
                // ]
    Promise.any()
        ES2021 引入了Promise.any()方法。该方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例返回。
        只要参数实例有一个变成fulfilled状态，包装实例就会变成fulfilled状态；如果所有参数实例都变成rejected状态，包装实例就会变成rejected状态。
        Promise.any()跟Promise.race()方法很像，只有一点不同，就是不会因为某个 Promise 变成rejected状态而结束。
    Promise.resolve()
        有时需要将现有对象转为 Promise 对象，Promise.resolve()方法就起到这个作用。
            const jsPromise = Promise.resolve($.ajax('/whatever.json'));
            上面代码将 jQuery 生成的deferred对象，转为一个新的 Promise 对象。

            Promise.resolve()等价于下面的写法。

            Promise.resolve('foo')
            // 等价于
            new Promise(resolve => resolve('foo'))
        Promise.resolve()方法的参数分成四种情况。
            （1）参数是一个 Promise 实例
                如果参数是 Promise 实例，那么Promise.resolve将不做任何修改、原封不动地返回这个实例。
            （2）参数是一个thenable对象
                thenable对象指的是具有then方法的对象，比如下面这个对象。
                let thenable = {
                    then: function(resolve, reject) {
                        resolve(42);
                    }
                };
                Promise.resolve()方法会将这个对象转为 Promise 对象，然后就立即执行thenable对象的then()方法。
            （3）参数不是具有then()方法的对象，或根本就不是对象
                如果参数是一个原始值，或者是一个不具有then()方法的对象，则Promise.resolve()方法返回一个新的 Promise 对象，状态为resolved。
                const p = Promise.resolve('Hello');
                p.then(function (s) {
                    console.log(s)
                });
                上面代码生成一个新的 Promise 对象的实例p。由于字符串Hello不属于异步操作（判断方法是字符串对象不具有 then 方法），
                返回 Promise 实例的状态从一生成就是resolved，所以回调函数会立即执行。Promise.resolve()方法的参数，会同时传给回调函数。
            （4）不带有任何参数

                Promise.resolve()方法允许调用时不带参数，直接返回一个resolved状态的 Promise 对象。

                所以，如果希望得到一个 Promise 对象，比较方便的方法就是直接调用Promise.resolve()方法。

                const p = Promise.resolve();

                p.then(function () {
                // ...
                });
                上面代码的变量p就是一个 Promise 对象。

                需要注意的是，立即resolve()的 Promise 对象，是在本轮“事件循环”（event loop）的结束时执行，而不是在下一轮“事件循环”的开始时
                    setTimeout(function () {
                        console.log('three');
                    }, 0);

                    Promise.resolve().then(function () {
                        console.log('two');
                    });

                    console.log('one');

                    // one
                    // two
                    // three
                    上面代码中，setTimeout(fn, 0)在下一轮“事件循环”开始时执行，Promise.resolve()在本轮“事件循环”结束时执行，console.log('one')则是立即执行，因此最先输出。
    Promise.reject()
        Promise.reject(reason)方法也会返回一个新的 Promise 实例，该实例的状态为rejected。

        const p = Promise.reject('出错了');
        // 等同于
        const p = new Promise((resolve, reject) => reject('出错了'))

        p.then(null, function (s) {
        console.log(s)
        });
        // 出错了
        上面代码生成一个 Promise 对象的实例p，状态为rejected，回调函数会立即执行。

        Promise.reject()方法的参数，会原封不动地作为reject的理由，变成后续方法的参数。

        Promise.reject('出错了')
        .catch(e => {
        console.log(e === '出错了')
        })
        // true
        上面代码中，Promise.reject()方法的参数是一个字符串，后面catch()方法的参数e就是这个字符串。

Reflect
    概述
        Reflect对象与Proxy对象一样，也是 ES6 为了操作对象而提供的新 API。Reflect对象的设计目的有这样几个。
            （1） 将Object对象的一些明显属于语言内部的方法（比如Object.defineProperty），放到Reflect对象上
            （2） 修改某些Object方法的返回结果，让其变得更合理。比如，Object.defineProperty(obj, name, desc)在无法定义属性时，
                会抛出一个错误，而Reflect.defineProperty(obj, name, desc)则会返回false。
            （3） 让Object操作都变成函数行为。某些Object操作是命令式，比如name in obj和delete obj[name]，
                而Reflect.has(obj, name)和Reflect.deleteProperty(obj, name)让它们变成了函数行为。
                // 老写法
                'assign' in Object // true

                // 新写法
                Reflect.has(Object, 'assign') // true   
            （4）Reflect对象的方法与Proxy对象的方法一一对应，只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法。
    静态方法
        Reflect对象一共有 13 个静态方法。
            Reflect.get(target, name, receiver)
                Reflect.get方法查找并返回target对象的name属性，如果没有该属性，则返回undefined。
            Reflect.set(target, name, value, receiver)
                Reflect.set方法设置target对象的name属性等于value。
            Reflect.has(obj, name)
                Reflect.has方法对应name in obj里面的in运算符。
            Reflect.deleteProperty(obj, name)
                Reflect.deleteProperty方法等同于delete obj[name]，用于删除对象的属性。
            Reflect.construct(target, args)
                Reflect.construct方法等同于new target(...args)，这提供了一种不使用new，来调用构造函数的方法。
                    function Greeting(name) {
                        this.name = name;
                    }
                    // new 的写法
                    const instance = new Greeting('张三');

                    // Reflect.construct 的写法
                    const instance = Reflect.construct(Greeting, ['张三']);
            Reflect.getPrototypeOf(obj)
                Reflect.getPrototypeOf方法用于读取对象的__proto__属性，对应Object.getPrototypeOf(obj)。
            Reflect.setPrototypeOf(obj, newProto)
                Reflect.setPrototypeOf方法用于设置目标对象的原型（prototype），对应Object.setPrototypeOf(obj, newProto)方法。它返回一个布尔值，表示是否设置成功。
            Reflect.apply(func, thisArg, args)
                Reflect.apply方法等同于Function.prototype.apply.call(func, thisArg, args)，
                用于绑定this对象后执行给定函数。
                一般来说，如果要绑定一个函数的this对象，可以这样写fn.apply(obj, args)，
                但是如果函数定义了自己的apply方法，就只能写成Function.prototype.apply.call(fn, obj, args)，采用Reflect对象可以简化这种操作。
            Reflect.defineProperty(target, propertyKey, attributes)
                Reflect.defineProperty方法基本等同于Object.defineProperty，用来为对象定义属性。未来，后者会被逐渐废除，请从现在开始就使用Reflect.defineProperty代替它。
            Reflect.getOwnPropertyDescriptor(target, propertyKey)
                Reflect.getOwnPropertyDescriptor基本等同于Object.getOwnPropertyDescriptor，用于得到指定属性的描述对象，将来会替代掉后者。
            Reflect.isExtensible (target)
                Reflect.isExtensible方法对应Object.isExtensible，返回一个布尔值，表示当前对象是否可扩展。
            Reflect.preventExtensions(target)
                Reflect.preventExtensions对应Object.preventExtensions方法，用于让一个对象变为不可扩展。它返回一个布尔值，表示是否操作成功。
            Reflect.ownKeys (target)
                Reflect.ownKeys方法用于返回对象的所有属性，基本等同于Object.getOwnPropertyNames与Object.getOwnPropertySymbols之和。




Iterator（遍历器）的概念
    它是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）。
    Iterator 的作用有三个：
        一是为各种数据结构，提供一个统一的、简便的访问接口；
        二是使得数据结构的成员能够按某种次序排列；
        三是 ES6 创造了一种新的遍历命令for...of循环，Iterator 接口主要供for...of消费。
    Iterator 的遍历过程是这样的。
        （1）创建一个指针对象，指向当前数据结构的起始位置。也就是说，遍历器对象本质上，就是一个指针对象。
        （2）第一次调用指针对象的next方法，可以将指针指向数据结构的第一个成员。
        （3）第二次调用指针对象的next方法，指针就指向数据结构的第二个成员。
        （4）不断调用指针对象的next方法，直到它指向数据结构的结束位置。
    默认 Iterator 接口
        Iterator 接口的目的，就是为所有数据结构，提供了一种统一的访问机制，即for...of循环（详见下文）。当使用for...of循环遍历某种数据结构时，该循环会自动去寻找 Iterator 接口。
        一种数据结构只要部署了 Iterator 接口，我们就称这种数据结构是“可遍历的”（iterable）。
        ES6 规定，默认的 Iterator 接口部署在数据结构的Symbol.iterator属性，或者说，一个数据结构只要具有Symbol.iterator属性，就可以认为是“可遍历的”（iterable）。
        Symbol.iterator属性本身是一个函数，就是当前数据结构默认的遍历器生成函数。执行这个函数，就会返回一个遍历器。至于属性名Symbol.iterator
        ，它是一个表达式，返回Symbol对象的iterator属性，这是一个预定义好的、类型为 Symbol 的特殊值，所以要放在方括号内
    原生具备 Iterator 接口的数据结构如下。
        Array
        Map
        Set
        String
        TypedArray
        函数的 arguments 对象
        NodeList 对象
        下面的例子是数组的Symbol.iterator属性。
            let arr = ['a', 'b', 'c'];
            let iter = arr[Symbol.iterator]();

            iter.next() // { value: 'a', done: false }
            iter.next() // { value: 'b', done: false }
            iter.next() // { value: 'c', done: false }
            iter.next() // { value: undefined, done: true }
        上面代码中，变量arr是一个数组，原生就具有遍历器接口，部署在arr的Symbol.iterator属性上面。所以，调用这个属性，就得到遍历器对象。
    for...of 循环
        ES6 借鉴 C++、Java、C# 和 Python 语言，引入了for...of循环，作为遍历所有数据结构的统一的方法。

        一个数据结构只要部署了Symbol.iterator属性，就被视为具有 iterator 接口，就可以用for...of循环遍历它的成员。也就是说，for...of循环内部调用的是数据结构的Symbol.iterator方法。

        for...of循环可以使用的范围包括数组、Set 和 Map 结构、某些类似数组的对象（比如arguments对象、DOM NodeList 对象）、后文的 Generator 对象，以及字符串。
Generator 函数的语法
    Generator 函数是 ES6 提供的一种异步编程解决方案
        执行 Generator 函数会返回一个遍历器对象，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。
        返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。

    形式上，Generator 函数是一个普通函数，但是有两个特征。
        一是，function关键字与函数名之间有一个星号；
        二是，函数体内部使用yield表达式，定义不同的内部状态（yield在英语里的意思就是“产出”）。
        上面代码定义了一个 Generator 函数helloWorldGenerator，它内部有两个yield表达式（hello和world），即该函数有三个状态：hello，world 和 return 语句（结束执行）。
        然后，Generator 函数的调用方法与普通函数一样，也是在函数名后面加上一对圆括号。不同的是，调用 Generator 函数后，该函数并不执行，
        返回的也不是函数运行结果，而是一个指向内部状态的指针对象，也就是上一章介绍的遍历器对象（Iterator Object）。
        下一步，必须调用遍历器对象的next方法，使得指针移向下一个状态。也就是说，每次调用next方法，内部指针就从函数头部或上一次停下来的地方开始执行，
        直到遇到下一个yield表达式（或return语句）为止。换言之，Generator 函数是分段执行的，yield表达式是暂停执行的标记，而next方法可以恢复执行。

        hw.next()
        // { value: 'hello', done: false }

        hw.next()
        // { value: 'world', done: false }

        hw.next()
        // { value: 'ending', done: true }

        hw.next()
        // { value: undefined, done: true }
    yield 表达式
        由于 Generator 函数返回的遍历器对象，只有调用next方法才会遍历下一个内部状态，所以其实提供了一种可以暂停执行的函数。yield表达式就是暂停标志。

        遍历器对象的next方法的运行逻辑如下。

            （1）遇到yield表达式，就暂停执行后面的操作，并将紧跟在yield后面的那个表达式的值，作为返回的对象的value属性值。

            （2）下一次调用next方法时，再继续往下执行，直到遇到下一个yield表达式。

            （3）如果没有再遇到新的yield表达式，就一直运行到函数结束，直到return语句为止，并将return语句后面的表达式的值，作为返回的对象的value属性值。

            （4）如果该函数没有return语句，则返回的对象的value属性值为undefined。
    
        Generator 函数可以不用yield表达式，这时就变成了一个单纯的暂缓执行函数。

            function* f() {
            console.log('执行了！')
            }

            var generator = f();

            setTimeout(function () {
            generator.next()
            }, 2000);
            上面代码中，函数f如果是普通函数，在为变量generator赋值时就会执行。但是，函数f是一个 Generator 函数，就变成只有调用next方法时，函数f才会执行。

            另外需要注意，yield表达式只能用在 Generator 函数里面，用在其他地方都会报错。

            (function (){
            yield 1;
            })()
            // SyntaxError: Unexpected number
            上面代码在一个普通函数中使用yield表达式，结果产生一个句法错误。

Generator 函数的异步应用
    异步
        所谓"异步"，简单说就是一个任务不是连续完成的，可以理解成该任务被人为分成两段，先执行第一段，然后转而执行其他任务，等做好了准备，再回过头执行第二段。

    回调函数
        JavaScript 语言对异步编程的实现，就是回调函数。所谓回调函数，就是把任务的第二段单独写在一个函数里面，等到重新执行这个任务的时候，就直接调用这个函数

    Promise
        回调函数本身并没有问题，它的问题出现在多个回调函数嵌套。
        它不是新的语法功能，而是一种新的写法允许将回调函数的嵌套，
        改成链式调用。采用 Promise，连续读取多个文件

Class 的基本语法 

    基本上，ES6 的class可以看作只是一个语法糖（ES6 的类只是 ES5 的构造函数的一层包装），它的绝大部分功能，ES5 都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已

    constructor 方法
        constructor()方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须有constructor()方法，如果没有显式定义，一个空的constructor()方法会被默认添加。
    类的实例
        生成类的实例的写法，与 ES5 完全一样，也是使用new命令。前面说过，如果忘记加上new，像函数那样调用Class，将会报错。
    取值函数（getter）和存值函数（setter）
        与 ES5 一样，在“类”的内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。
    属性表达式
        类的属性名，可以采用表达式。

        let methodName = 'getArea';

        class Square {
            constructor(length) {
                // ...
            }

            [methodName]() {
                // ...
            }
        }
    Class 表达式
        与函数一样，类也可以使用表达式的形式定义。
            const MyClass = class Me {
                getClassName() {
                    return Me.name;
                }
            };
    注意点
        （1）严格模式

            类和模块的内部，默认就是严格模式，所以不需要使用use strict指定运行模式。只要你的代码写在类或模块之中，就只有严格模式可用。考虑到未来所有的代码，其实都是运行在模块之中，所以 ES6 实际上把整个语言升级到了严格模式。

        （2）不存在提升

            类不存在变量提升（hoist），这一点与 ES5 完全不同。
        （3）name 属性
            由于本质上，ES6 的类只是 ES5 的构造函数的一层包装，所以函数的许多特性都被Class继承，包括name属性。
                class Point {}
                Point.name // "Point"
        （4）Generator 方法
            如果某个方法之前加上星号（*），就表示该方法是一个 Generator 函数。
                class Foo {
                constructor(...args) {
                    this.args = args;
                }
                * [Symbol.iterator]() {
                    for (let arg of this.args) {
                    yield arg;
                    }
                }
                }
                for (let x of new Foo('hello', 'world')) {
                console.log(x);
                }
                // hello
                // world
        （5）this 的指向
            类的方法内部如果含有this，它默认指向类的实例。
    静态方法
        类相当于实例的原型，所有在类中定义的方法，都会被实例继承。如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”。
        注意，
            如果静态方法包含this关键字，这个this指的是类，而不是实例。
            父类的静态方法，可以被子类继承。
                class Foo {
                    static classMethod() {
                        return 'hello';
                    }
                }
                class Bar extends Foo {
                }
                Bar.classMethod() // 'hello'
    实例属性的新写法
        实例属性除了定义在constructor()方法里面的this上面，也可以定义在类的最顶层。
            class IncreasingCounter {
                _count = 0;
                get value() {
                    console.log('Getting the current value!');
                    return this._count;
                }
                increment() {
                    this._count++;
                }
            }
    静态属性
        静态属性指的是 Class 本身的属性，即Class.propName，而不是定义在实例对象（this）上的属性。  
    new.target 属性
        new是从构造函数生成实例对象的命令。ES6 为new命令引入了一个new.target属性，该属性一般用在构造函数之中，返回new命令作用于的那个构造函数。
        如果构造函数不是通过new命令或Reflect.construct()调用的，new.target会返回undefined，因此这个属性可以用来确定构造函数是怎么调用的。  