
jsx语法规则：
    1.定义虚拟DOM时，不要写引号。
    2.标签中混入JS表达式时要用{}。
    3.样式的类名指定不要用class，要用className。
    4.内联样式，要用style={{key:value}}的形式去写。
    5.只有一个根标签
    6.标签必须闭合
    7.标签首字母
            (1).若小写字母开头，则将该标签转为html中同名元素，若html中无该标签对应的同名元素，则报错。
            (2).若大写字母开头，react就去渲染对应的组件，若组件没有定义，则报错。

一定注意区分：【js语句(代码)】与【js表达式】
        1.表达式：一个表达式会产生一个值，可以放在任何一个需要值的地方
                    下面这些都是表达式：
                            (1). a
                            (2). a+b
                            (3). demo(1)
                            (4). arr.map() 
                            (5). function test () {}
        2.语句(代码)：
                    下面这些都是语句(代码)：
                            (1).if(){}
                            (2).for(){}
                            (3).switch(){case:xxxx}

虚拟DOM 
    1.关于虚拟DOM：
        (1).本质是Object类型的对象（一般对象）
        (2).虚拟DOM比较“轻”，真实DOM比较“重”，因为虚拟DOM是React内部在用，无需真实DOM上那么多的属性。
        (3).虚拟DOM最终会被React转化为真实DOM，呈现在页面上。
    2.虚拟DOM创建:
        (1). const VDOM = (<h1 id="title"><span>Hello,React</span></h1>)
        (2).const VDOM = React.createElement('h1',{id:'title'},React.createElement('span',{},'Hello,React'))


React组件创建
    
    1. 函数式组件

        function MyComponent(){
                console.log(this); //此处的this是undefined，因为babel编译后开启了严格模式
                return <h2>我是用函数定义的组件(适用于【简单组件】的定义)</h2>
            }
            //2.渲染组件到页面
            ReactDOM.render(<MyComponent/>,document.getElementById('test'))
            /* 
                执行了ReactDOM.render(<MyComponent/>.......之后，发生了什么？
                    1.React解析组件标签，找到了MyComponent组件。
                    2.发现组件是使用函数定义的，随后调用该函数，将返回的虚拟DOM转为真实DOM，随后呈现在页面中。
            */

    2. 类式组件

    	class MyComponent extends React.Component {
			render(){
				//render是放在哪里的？—— MyComponent的原型对象上，供实例使用。
				//render中的this是谁？—— MyComponent的实例对象 <=> MyComponent组件实例对象。
				console.log('render中的this:',this);
				return <h2>我是用类定义的组件(适用于【复杂组件】的定义)</h2>
			}
		}

		//2.渲染组件到页面
		ReactDOM.render(<MyComponent/>,document.getElementById('test'))
		/* 
			执行了ReactDOM.render(<MyComponent/>.......之后，发生了什么？
				1.React解析组件标签，找到了MyComponent组件。
				2.发现组件是使用类定义的，随后new出来该类的实例，并通过该实例调用到原型上的render方法。
				3.将render返回的虚拟DOM转为真实DOM，随后呈现在页面中。
		*/

React props state refs

    state 与 props 是 React 组件中最重要的概念。如果顶层组件初始化 props，那么 React 会向下
    遍历整棵组件树，重新尝试渲染所有相关的子组件。而 state 只关心每个组件自己内部的状态，
    这些状态只能在组件内改变。把组件看成一个函数，那么它接受了 props 作为参数，内部由 state
    作为函数的内部参数，返回一个 Virtual DOM 的实现
    
    1.state

        (1).在react中，组件内的状态是通过state来管理的，通过组件内置的方法setSate方法，
            来改变state的状态（完成对行为的控制、数据的更新和界面的渲染。），
            state状态更改之后，组件会重新渲染，从而会驱动虚拟DOM改变

    2.props

        (1).props 是 React 中另一个重要的概念。 props 是 React 用来让组件之间
            互相联系的一种机制，通俗地说就像方法的参数一样。React 的单向数据流，主要的流动管道就是 props。
            props 本身是不可变的，如果说要渲染一个对 props加工后的值，最简单的方法就是使用局部变量或直接在 JSX 中计算结果。

        (2).构造器是否接收props，是否传递给super，取决于：是否希望在构造器中通过this访问props
    
    3.refs 
        ref 的创建方式 

        1.直接使用字符串的形式 

            <input type ='text' ref = 'input' value = ''/>

            使用：通过 this.refs.input 获取input 的dom节点 
            缺点：此方法以后版本有可能要废弃，效率低
        
        2.使用回调函数的方式（内联函数的形式）
        
        	<input ref={c => this.input1 = c } type="text" placeholder="点击按钮提示数据"/>
        
            使用：回调函数传入input 节点，然后挂在到当前实例上
            缺点：在渲染的时候，会调用两次，第一次会返回null（原因是因为第二次会先清除第一次设置的值，然后再进行第二次赋值）
        
        3.使用React.createRef()

            class Demo extends React.Component{
                /* 
                    React.createRef调用后可以返回一个容器，该容器可以存储被ref所标识的节点,该容器是“专人专用”的
                */
                myRef = React.createRef()
                myRef2 = React.createRef()
                render(){
                    return(
                        <div>
                            <input ref={this.myRef} type="text" placeholder="点击按钮提示数据"/>&nbsp;
                            <button onClick={this.showData}>点我提示左侧的数据</button>&nbsp;
                            <input onBlur={this.showData2} ref={this.myRef2} type="text" placeholder="失去焦点提示数据"/>&nbsp;
                        </div>
                    )
                }
            }

            使用:通过this.myRref.current 获取dom节点


React 事件
    在 React 底层，主要对合成事件做了两件事：事件委派和自动绑定。
        1. 事件委派
            在使用 React 事件前，一定要熟悉它的事件代理机制。它并不会把事件处理函数直接绑定到
            真实的节点上，而是把所有事件绑定到结构的最外层，使用一个统一的事件监听器，这个事件监
            听器上维持了一个映射来保存所有组件内部的事件监听和处理函数。当组件挂载或卸载时，只是
            在这个统一的事件监听器上插入或删除一些对象；当事件发生时，首先被这个统一的事件监听器
            处理，然后在映射里找到真正的事件处理函数并调用。这样做简化了事件处理和回收机制，效率
            也有很大提升。
        2. 自动绑定
            在 React 组件中，每个方法的上下文都会指向该组件的实例，即自动绑定 this 为当前组件。

	1.通过onXxx属性指定事件处理函数(注意大小写)
        a.React使用的是自定义(合成)事件, 而不是使用的原生DOM事件 —————— 为了更好的兼容性
        b.React中的事件是通过事件委托方式处理的(委托给组件最外层的元素) ————————为了的高效
	2.通过event.target得到发生事件的DOM元素对象 ——————————不要过度使用ref

表单数据收集 

    1.非受控组件---现用现取获取的数据表单(是我们点击按钮之后执行函数，在函数中获取表单数据)
    1.受控组件-----表单输入的时候，实时的获取所输入的表单的内容

在 React 中使用 mixin
    import PureRenderMixin from 'react-addons-pure-render-mixin';
    React.createClass({
        mixins: [PureRenderMixin],
        render() {
            return <div>foo</div>;
        }
    });

    在 React 中是不允许出现重名普通方法的 mixin
    
    如果是 React 生命周期定义的方法，则会将各个模块的生命周期方法叠加在一起顺序执行

    使用 createClass 实现的 mixin 为组件做了两件事。
        工具方法。这是 mixin 的基本功能，如果你想共享一些工具类方法，就可以定义它们，直
        接在各个组件中使用
    生命周期继承
        props 与 state 合并。这是 mixin 特别重要的功能，它能够合并生命周期方
        法。如果有很多 mixin 来定义 componentDidMount 这个周期，那么 React 会非常智能地将
        它们都合并起来执行。同样， mixin 也可以作用在 getInitialState 的结果上，作 state 的
        合并，而 props 也是这样合并的
    缺点
        破坏了原有组件的封装
        命名冲突
        增加复杂性

高阶函数：
    如果一个函数符合下面2个规范中的任何一个，那该函数就是高阶函数。
        1.若A函数，接收的参数是一个函数，那么A就可以称之为高阶函数。
        2.若A函数，调用的返回值依然是一个函数，那么A就可以称之为高阶函数。
        常见的高阶函数有：Promise、setTimeout、arr.map()等等

函数的柯里化：

    通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式。 
        function sum(a){
            return(b)=>{
                return (c)=>{
                    return a+b+c
                }
            }
        }

高阶组件

    高阶组件（ higher-order component），类似于高阶函数，它接受 React 组件作为输入，
    输出一个新的 React 组件

    高阶组件让我们的代码更具有复用性、逻辑性与抽象特性。

    实现高阶组件的方法有如下两种。
        属性代理（ props proxy） 。高阶组件通过被包裹的 React 组件来操作 props。
        反向继承（ inheritance inversion） 。高阶组件继承于被包裹的 React 组件。
            1. 属性代理
                属性代理是常见高阶组件的实现方法，我们通过一个例子来说明：
                import React, { Component } from 'React';
                const MyContainer = (WrappedComponent) =>
                    class extends Component {
                        render() {
                            return <WrappedComponent {...this.props} />;
                        }
                }
            2. 反向继承
                另一种构建高阶组件的方法称为反向继承，从字面意思上看，它一定与继承特性相关。我们
                同样来看一个简单的实现：2.5 组件间抽象 

                const MyContainer = (WrappedComponent) =>
                    class extends WrappedComponent {
                        render() {
                            return super.render();
                        }
                }
                它有两个比较大的特点，下面我们展开来讲一讲。
                    1.渲染劫持
                        渲染劫持指的就是高阶组件可以控制 WrappedComponent 的渲染过程，并渲染各种各样的结果

                        const MyContainer = (WrappedComponent) =>
                            class extends WrappedComponent {
                                render() {
                                    if (this.props.loggedIn) {
                                        return super.render();
                                    } else {
                                        return null;
                                }
                            }
                        }


React 生命周期

    React 生命周期分成两类：
        旧：
            1. 当组件在挂载或卸载时
                初始化阶段: 由ReactDOM.render()触发---初次渲染
                    (1) constructor()
                    (2) componentWillMount()
                    (3) render()
                    (4) componentDidMount() =====> 常用
                        一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息

            2. 当组件接收新的数据时，即组件更新时。

                更新阶段: 由组件内部this.setSate()或父组件render触发
                
                (1) componentWillReceiveProps(nextProps) {  父组件props数据改变的时候执行这个函数(执行一下生命周期,默认情况下，props改变，会执行所有子组件的生命周期) 
                        // this.setState({})                此方法可以作为 React 在 props 传入后，渲染之前 setState 的机会。在此方法中调用 setState 是不会二次渲染的。                                
                    }                                       此方法在初次渲染的时候不会触发，在props有新数据的时候回触发

                (2) shouldComponentUpdate(nextProps, nextState){}   由组件内部this.setSate()或父组件render 执行一下生命周期
                                                                    它接收需要更新的 props 和 state.因此，当方法返回 false 的时候，
                                                                    组件不再向下执行生命周期方法。
                
                
                (3) componentWillUpdate(nextProps, nextState){}     执行forceUpdate()执行一下生命周期(不更改任何状态中的数据，强制更新一下)

                (4) render()

                (5) componentDidUpdate(prevProps, prevState){}


            3. 卸载组件: 由ReactDOM.unmountComponentAtNode()触发
                1.	componentWillUnmount()  =====> 常用
                    一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息
        新：
            1. 初始化阶段: 由ReactDOM.render()触发---初次渲染
                1.	constructor()
                2.	static getDerivedStateFromProps(props,state){//若state的值在任何时候都取决于props，那么可以使用getDerivedStateFromProps
				        console.log('getDerivedStateFromProps',props,state);
				        return null // 必须返回 null 或者一个状态对象
			        } 
                3.	render()
                4.	componentDidMount() =====> 常用
                    一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息
            2. 更新阶段: 由组件内部this.setSate()或父组件重新render触发

                1.	static getDerivedStateFromProps(props,state){//若state的值在任何时候都取决于props，那么可以使用getDerivedStateFromProps
				        console.log('getDerivedStateFromProps',props,state);
				        return null
			        } 
                2.	shouldComponentUpdate()

                3.	render()

                4.	getSnapshotBeforeUpdate(prevProps,prevState){ //在更新之前获取快照,最近一次渲染输出之前调用，
                        return obj;                                 可以在dom跟新之前获取一些信息（如：滚动位置）
                    }                                                此时生命周期任何的返回值都将作为参数传递给 componentDidUpdate

                5.	componentDidUpdate(prevProps,prevState,obj)

            3. 卸载组件: 由ReactDOM.unmountComponentAtNode()触发
                1.	componentWillUnmount()  =====> 常用
                    一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息

Diff算法
    1). react/vue中的key有什么作用？（key的内部原理是什么？）
    2). 为什么遍历列表时，key最好不要用index?
    
        1. 虚拟DOM中key的作用：
                1). 简单的说: key是虚拟DOM对象的标识, 在更新显示时key起着极其重要的作用。

                2). 详细的说: 当状态中的数据发生变化时，react会根据【新数据】生成【新的虚拟DOM】, 
                                            随后React进行【新虚拟DOM】与【旧虚拟DOM】的diff比较，比较规则如下：

                                a. 旧虚拟DOM中找到了与新虚拟DOM相同的key：
                                            (1).若虚拟DOM中内容没变, 直接使用之前的真实DOM
                                            (2).若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM

                                b. 旧虚拟DOM中未找到与新虚拟DOM相同的key
                                            根据数据创建新的真实DOM，随后渲染到到页面
                                
        2. 用index作为key可能会引发的问题：
                            1. 若对数据进行：逆序添加、逆序删除等破坏顺序操作:
                                            会产生没有必要的真实DOM更新 ==> 界面效果没问题, 但效率低。

                            2. 如果结构中还包含输入类的DOM：
                                            会产生错误DOM更新 ==> 界面有问题。
                                            
                            3. 注意！如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，
                                仅用于渲染列表用于展示，使用index作为key是没有问题的。
                
        3. 开发中如何选择key?:
                            1.最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。
                            2.如果确定只是简单的展示数据，用index也是可以的。

消息订阅和发布
    import PubSub from ‘pubsub-js’;
    PubSub.subscribe('delete',function(data){ }); // 订阅
    PubSub.publish('delete',data)  // 发布
    PubSub.unsubscribe('delete',function(data){ }); // 取消订阅

React 路由 
    1 SPA 的理解 
        (1). 单页面应用整个页面只有一个完整的页面
        (2). 点击页面中的连接不会刷新页面，只会做页面的局部更新
        (3). 数据需要通过ajax请求获取，并在前端异步展现

    2. 路由的理解
        1.	什么是路由?
            1.	一个路由就是一个映射关系(key:value)
            2.	key为路径, value可能是function或component
    3. 路由分类
        1.	后端路由：
            1)	理解：value是function, 用来处理客户端提交的请求。
            2)	注册路由： router.get(path, function(req, res))
            3)	工作过程：当node接收到一个请求时, 根据请求路径找到匹配的路由, 调用路由中的函数来处理请求, 返回响应数据
        2.	前端路由：
            1)	浏览器端路由，value是component，用于展示页面内容。
            2)	注册路由: <Route path="/test" component={Test}>
            3)	工作过程：当浏览器的path变为/test时, 当前路由组件就会变为Test组件
        4. react-router-dom的理解
            1.	react的一个插件库。
            2.	专门用来实现一个SPA应用。
            3.	基于react的项目基本都会用到此库。
        5. react-router-dom相关API
            1. 内置组件
                1.	<BrowserRouter>
                2.	<HashRouter>
                3.	<Route>
                4.	<Redirect>
                5.	<Link>
                6.	<NavLink>
                7.	<Switch>
            2. 其它
                1.	history对象
                2.	match对象
                3.	withRouter函数
    4. 路由组件和一般组件

        1. 写法不同 
            一般组件 <Demo/>
            路由组件：<Router path='/demo' component = {Demo}/>
        2. 存放的方式不同
            一般组件：在components存放
            路由组件: 在pages 存放
        3. 接收到的props不同
            一般组件：写组件标签时传递了什么，就能收到什么
            路由组件: 接收到三个固定的属性
                history对象
                    go:f go(n)
                    goBack:f goBack()
                    goForward: f goForward()
                    push: f push(path,state)
                    replace: f replace(path,state)
                location对象
                    pathname:''
                    search:""
                    state:""
                match对象
                    params:{}
                    path:''
                    url:''
    5. Switch的使用           
        1. 通常情况下，path 和 component是一一对应的关系
        2. Switch可以挺高路由匹配效率(单一匹配，匹配成功之后不往下继续匹配)
    6. 解决多级路径刷新页面样式丢失问题
       1. public/index.html 中引入样式时 ./ 改为 /
       2. public/index.html 中引入样式时 ./ 改为 %PUBLIC_URL%
       3. 使用HashRouter  
    7. 路由的严格匹配和模糊匹配
        1. 默认使用的是模糊匹配（输入的路径必须要包含要匹配的路径，且顺序一致）
        2. 开启严格匹配模式<Route exact>
        3. 严格匹配不要随便开启，需要的时候再开启，有些时候开启会导致无法继续匹配二级路由
    8. 路由重定向
        Redirect 当路由都无法匹配的时候，可以使用重定向到制定页面
        一般卸载路由注册的最下方
        <Redirect to = '/about'/>
    9. 路由组件传递参数
        1.params参数
            路由连接携带参数 <Link to = '/demo/test/tom/14'>详情</Link>
            注册路由声明接收：Route path = '/demo/test/:name/:age' component = {Test} />
            接收参数： const {name,age} = this.props.params
        2. search参数
            路由连接携带参数 <Link to = '/demo/test?name=tom&age=14'>详情</Link>
            注册路由声明接收：Route path = '/demo/test' component = {Test} />
            接收参数： const {name,age} = this.props.location对象
            备注：获取到的search 是urlencoded编码的字符串，需要借助querystring解析
        3.state参数
            路由连接携带参数 <Link to = '{pathname='/demo/test',state:{name:tom,age:14}}'>详情</Link>
            注册路由声明接收：Route path = '/demo/test' component = {Test} />
            接收参数： const {name,age} = this.props.location.state || {}
            备注：state 传参地址栏无参数信息，刷新也可以保留数据
    10. replace 模式开启 
            <Link replace = {true} to = '/demo/test/tom/14'>详情</Link>
    11. withRouter函数
        withRouter可以加工一般组件，让一般组件具备路由组件所特有的API
        withRouter的返回值是一个新组建        
    12. BrowserRouter 与 HashRouter 的区别
        1. 底层原理不一样
            BrowserRouter使用的是H5的History API，不兼容IE9及以下版本
            HashRouter 使用的是URL的哈希值
        2. path路径的表现形式不一样
            BrowserRouter的路径中没有#号
            HashRouter的路径包含#号
        3. 刷新之后对路由state参数的影响
            BrowserRouter刷新之后对state没有影响，因为state保存在history对象中
            HashRouter刷新后对导致路由state参数的丢失
        4. HashRouter可以用于解决一些路径错误相关的问题     

        

    





