开放-封闭原则 在面向对象的程序设计中，开放封闭原则(OCP)是最重要的一条原则。很多时候，一个程序具有良好的设计，往往说明它是符合开放封闭原则的。 
             当需要改变一个程序的功能或者给这个程序增加新功能的时候，可以使用增加代码的方式，但是不允许改动程序的源代码

单一职责原则指的是，就一个类（通常也包括对象和函数等）而言，应该仅有一个引起它变化的原因。


this
    JavaScript 的this 总是指向一个对象，而具体指向哪个对象是在
    运行时基于函数的执行环境动态绑定的，而非函数被声明时的环境。
    this的指向
        this 的指向大致可以分为以下4 种。
             作为对象的方法调用。
                当函数作为对象的方法被调用时，this 指向该对象
             作为普通函数调用。
                当函数不作为对象的属性被调用时，也就是我们常说的普通函数方式，此时的this 总是指向全局对象。
             构造器调用。
                构造器里的this 就指向返回的这个对象

             Function.prototype.call 或Function.prototype.apply 调用。
                跟普通的函数调用相比，用Function.prototype.call 或Function.prototype.apply 
                可以动态地改变传入函数的this
call和apply的区别
    区别
        apply 接受两个参数，第一个参数指定了函数体内this 对象的指向，第二个参数为一个带下标的集合，这个集合可以为数组
        call 传入的参数数量不固定，跟apply 相同的是，第一个参数也是代表函数体内的this 指向，从第二个参数开始往后是字符串
    作用
        改变this 指向
            call 和apply 最常见的用途是改变函数内部的this 指向
        借用其他对象的方法
闭包
    一个函数可以访问另一个函数里面的变量
    变量的作用域
        变量的作用域，就是指变量的有效范
    变量的生存周期
        对于全局变量来说，全局变量的生存周期当然是永久的，除非我们主动销毁这个全局变量。
        而对于在函数内用var 关键字声明的局部变量来说，当退出函数时，这些局部变量即失去了
        它们的价值，它们都会随着函数调用的结束而被销毁
    作用
        1. 封装变量
            闭包可以帮助把一些不需要暴露在全局的变量封装成“私有变量”
        2. 延续局部变量的寿命
            var report = (function(){
                    var imgs = [];
                    return function( src ){
                    var img = new Image();
                    imgs.push( img );
                    img.src = src;
                }
            })();
    缺点: 
        闭包容易造成内存泄露
高阶函数
    高阶函数是指至少满足下列条件之一的函数。
         函数可以作为参数被传递；
         函数可以作为返回值输出。
    应用场景
        1. 回调函数
        2. Array.prototype.sort
        3. 函数节流
            var throttle = function ( fn, interval ) {
                var __self = fn, // 保存需要被延迟执行的函数引用
                timer, // 定时器
                firstTime = true; // 是否是第一次调用
                return function () {
                    var args = arguments,
                    __me = this;
                    if ( firstTime ) { // 如果是第一次调用，不需延迟执行
                        __self.apply(__me, args);
                        return firstTime = false;
                    }
                    if ( timer ) { // 如果定时器还在，说明前一次延迟执行还没有完成
                        return false;
                    }
                    timer = setTimeout(function () { // 延迟一段时间执行
                            clearTimeout(timer);
                            timer = null;
                            __self.apply(__me, args);
                        }, interval || 500 );
                    };
                };
                window.onresize = throttle(function(){
                    console.log( 1 );
                }, 500 );
            4. 分时函数
                var timeChunk = function( ary, fn, count ){
                    var obj,
                    t;
                    var len = ary.length;
                    var start = function(){
                        for ( var i = 0; i < Math.min( count || 1, ary.length ); i++ ){
                                var obj = ary.shift();
                                fn( obj );
                            }
                        };
                        return function(){
                            t = setInterval(function(){
                                if ( ary.length === 0 ){ // 如果全部节点都已经被创建好
                                    return clearInterval( t );
                                }
                                start();
                            }, 200 ); // 分批执行的时间间隔，也可以用参数的形式传入
                        };
                    };
        4. 分时函数
            var timeChunk = function( ary, fn, count ){
                var obj,
                t;
                var len = ary.length;
                var start = function(){
                    for ( var i = 0; i < Math.min( count || 1, ary.length ); i++ ){
                        var obj = ary.shift();
                        fn( obj );
                    }
                };
                return function(){
                    t = setInterval(function(){
                        if ( ary.length === 0 ){ // 如果全部节点都已经被创建好
                            return clearInterval( t );
                        }
                        start();
                    }, 200 ); // 分批执行的时间间隔，也可以用参数的形式传入
                };
            };            
        5. 惰性加载函数
            。此时addEvent 依然被声明为一个普通函
            数，在函数里依然有一些分支判断。但是在第一次进入条件分支之后，在函数内部会重写这个函
            数，重写之后的函数就是我们期望的addEvent 函数，在下一次进入addEvent 函数的时候，addEvent
            函数里不再存在条件分支语句
            var addEvent = function( elem, type, handler ){
                if ( window.addEventListener ){
                    addEvent = function( elem, type, handler ){
                    elem.addEventListener( type, handler, false );
                }
                }else if ( window.attachEvent ){
                    addEvent = function( elem, type, handler ){
                        elem.attachEvent( 'on' + type, handler );
                    }
                }
                    addEvent( elem, type, handler );
                };

单例模式 
    单例模式的定义是：保证一个类仅有一个实例，并提供一个访问它的全局访问点。
    单例模式的核心是确保只有一个实例，并提供全局访问
        1. 使用命名空间
            适当地使用命名空间，并不会杜绝全局变量，但可以减少全局变量的数量。
            最简单的方法依然是用对象字面量的方式：
                var namespace1 = {
                    a: function(){
                        alert (1);
                    },
                    b: function(){
                        alert (2);
                    }
                };
        2. 使用闭包封装私有变量
            这种方法把一些变量封装在闭包的内部，只暴露一些接口跟外界通信：
            var user = (function(){
                var __name = 'sven',
                __age = 29;
            return {
                getUserInfo: function(){
                    return __name + '-' + __age;
                }
            }
            })();
    惰性单例
        惰性单例指的是在需要的时候才创建对象实例。惰性单例是单例模式的重点  

        var getSingle = function( fn ){
            var result;
            return function(){
                return result || ( result = fn .apply(this, arguments ) );
            }
        };

        var createLoginLayer = function(){
            var div = document.createElement( 'div' );
            div.innerHTML = '我是登录浮窗';
            div.style.display = 'none';
            document.body.appendChild( div );
            return div;
        };
        var createSingleLoginLayer = getSingle( createLoginLayer );
        document.getElementById( 'loginBtn' ).onclick = function(){
            var loginLayer = createSingleLoginLayer();
            loginLayer.style.display = 'block';
        };
        下面我们再试试创建唯一的 iframe 用于动态加载第三方页面：
        var createSingleIframe = getSingle( function(){
            var iframe = document.createElement ( 'iframe' );
            document.body.appendChild( iframe );
            return iframe;
        });
        document.getElementById( 'loginBtn' ).onclick = function(){
            var loginLayer = createSingleIframe();
            loginLayer.src = 'http://baidu.com';
        };

策略模式
    策略模式的定义是： 定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换
        一个基于策略模式的程序至少由两部分组成。
            第一个部分是一组策略类，策略类封装了具体的算法，并负责具体的计算过程。
            第二个部分是环境类 Context， Context 接受客户的请求，随后把请求委托给某一个策略类。
            这句话如果说得更详细一点，就是：定义一系列的算法，把它们各自封装成策略类，算法被封装在策略类内部的方法里。
            在客户对 Context 发起请求的时候， Context 总是把请求委托给这些策略对象中间的某一个进行计算。
        
            var startegies = { // 算法
                "S":function (salary) {
                    return salary * 4
                },
                "A":function (salary) {
                    return salary * 4
                },
                "B":function (salary) {
                    return salary * 4
                }
            }

            var calculateBonUs = function (level,salary){ // 策略
                return startegies[level](salary)
            }

            console.log(calculateBonUs('S',20000))
            console.log(calculateBonUs('A',10000))
    策略模式的优缺点
        策略模式是一种常用且有效的设计模式，本章提供了计算奖金、缓动动画、表单校验这三个
        例子来加深大家对策略模式的理解。从这三个例子中，我们可以总结出策略模式的一些优点。
             策略模式利用组合、委托和多态等技术和思想，可以有效地避免多重条件选择语句。
             策略模式提供了对开放—封闭原则的完美支持，将算法封装在独立的 strategy 中，使得它
            们易于切换，易于理解，易于扩展。
             策略模式中的算法也可以复用在系统的其他地方，从而避免许多重复的复制粘贴工作。
             在策略模式中利用组合和委托来让 Context 拥有执行算法的能力，这也是继承的一种更轻
            便的替代方案。
        当然，策略模式也有一些缺点，但这些缺点并不严重。
            首先，使用策略模式会在程序中增加许多策略类或者策略对象，但实际上这比把它们负责的
            逻辑堆砌在 Context 中要好。
            其次，要使用策略模式，必须了解所有的 strategy，必须了解各个 strategy 之间的不同点，
            这样才能选择一个合适的 strategy。比如，我们要选择一种合适的旅游出行路线，必须先了解选
            择飞机、火车、自行车等方案的细节。此时 strategy 要向客户暴露它的所有实现，这是违反最少
            知识原则的。
代理模式
    代理模式是为一个对象提供一个代用品或占位符，以便控制对它的访问。（由于一个对象不能直接引用另一个对象，所以通过代理对象在这两个对象之间起到中介的作用） 
    保护代理
        虽然这只是个虚拟的例子，但我们可以从中找到两种代理模式的身影。代理 B 可以帮助 A
        过滤掉一些请求，比如送花的人中年龄太大的或者没有宝马的，这种请求就可以直接在代理 B
        处被拒绝掉。这种代理叫作保护代理。  
    虚拟代理
        另外，假设现实中的花价格不菲，导致在程序世界里， new Flower 也是一个代价昂贵的操作，
        那么我们可以把 new Flower 的操作交给代理 B 去执行，代理 B 会选择在 A 心情好时再执行 new
        Flower，这是代理模式的另一种形式，叫作虚拟代理。虚拟代理把一些开销很大的对象，延迟到
        真正需要它的时候才去创建。

        虚拟代理实现图片预加载
            var myImage = (function () {
                var imageNode = document.createElement('img');
                document.body.append(imageNode)
                return {
                    setSrc:function (src) {
                        imageNode.src = src
                    }
                }
            })

            var proxyImage = (function () {

                var img = new Image()

                img.onload = function () {
                    myImage.src = this.src
                }
                return {
                    setSrc:function (src) {
                        myImage.setSrc('占位符图片地址')
                        img.src = src
                    }
                }
            })()

            proxyImage.setSrc("预加载图片地址")
    缓存代理
        缓存代理可以为一些开销大的运算结果提供暂时的存储，在下次运算时，如果传递进来的参
        数跟之前一致，则可以直接返回前面存储的运算结果
       
        缓存代理的例子——计算乘积
            var mult = function(){
                console.log( '开始计算乘积' );
                var a = 1;
                for ( var i = 0, l = arguments.length; i < l; i++ ){
                    a = a * arguments[i];
                }
                return a;
            };
                mult( 2, 3 ); // 输出： 6
                mult( 2, 3, 4 ); // 输出： 24
                现在加入缓存代理函数：
            var proxyMult = (function(){
                var cache = {};
                return function(){
                    var args = Array.prototype.join.call( arguments, ',' );
                    if ( args in cache ){
                        return cache[ args ];
                    }
                    return cache[ args ] = mult.apply( this, arguments );
                }
            })();
                proxyMult( 1, 2, 3, 4 ); // 输出： 24
                proxyMult( 1, 2, 3, 4 ); // 输出： 24
        用高阶函数动态创建代理
            通过传入高阶函数这种更加灵活的方式，可以为各种计算方法创建缓存代理     
            /**************** 计算乘积 *****************/
                    var mult = function(){
                        var a = 1;
                        for ( var i = 0, l = arguments.length; i < l; i++ ){
                            a = a * arguments[i];
                        }
                        return a;
                    };
                    /**************** 计算加和 *****************/
                    var plus = function(){
                        var a = 0;
                        for ( var i = 0, l = arguments.length; i < l; i++ ){
                            a = a + arguments[i];
                        }
                        return a;
                    };
                    /**************** 创建缓存代理的工厂 *****************/
                    var createProxyFactory = function( fn ){
                        var cache = {};
                        return function(){
                            var args = Array.prototype.join.call( arguments, ',' );
                            if ( args in cache ){
                                return cache[ args ];
                            }
                            return cache[ args ] = fn.apply( this, arguments );
                        }
                    };
                    var proxyMult = createProxyFactory( mult ),
                    proxyPlus = createProxyFactory( plus );
                    alert ( proxyMult( 1, 2, 3, 4 ) ); // 输出： 24
                    alert ( proxyMult( 1, 2, 3, 4 ) ); // 输出： 24
                    alert ( proxyPlus( 1, 2, 3, 4 ) ); // 输出： 10
                    alert ( proxyPlus( 1, 2, 3, 4 ) ); // 输出： 10
迭代器模式
    迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。
    内部迭代器和外部迭代器
        迭代器可以分为内部迭代器和外部迭代器，它们有各自的适用场景。这一节我们将分别讨论
        这两种迭代器。
        1. 内部迭代器
            我们刚刚编写的 each 函数属于内部迭代器， each 函数的内部已经定义好了迭代规则，它完
            全接手整个迭代过程，外部只需要一次初始调用。
发布—订阅模式
    发布—订阅模式又叫观察者模式，它定义对象间的一种一对多的依赖关系，当一个对象的状
    态发生改变时，所有依赖于它的对象都将得到通知。在 JavaScript 开发中，我们一般用事件模型
    来替代传统的发布—订阅模式。

    发布—订阅模式的优点非常明显，一为时间上的解耦，二为对象之间的解耦
    当然，发布—订阅模式也不是完全没有缺点。创建订阅者本身要消耗一定的时间和内存，而且当你订阅一个消息后，也许此消息最后都未发生，但这个订阅者会始终存在于内存中。

    作用:
        1. 自定义事件
        2. DOM 事件
        3. 模块间通信
        var event = {
            clientList: [],
            listen: function( key, fn ){
                if ( !this.clientList[ key ] ){
                    this.clientList[ key ] = [];
                }
                this.clientList[ key ].push( fn ); // 订阅的消息添加进缓存列表
            },
            trigger: function(){
                var key = Array.prototype.shift.call( arguments ), // (1);
                fns = this.clientList[ key ];
                if ( !fns || fns.length === 0 ){ // 如果没有绑定对应的消息
                    return false;
                }
                for( var i = 0, fn; fn = fns[ i++ ]; ){
                    fn.apply( this, arguments ); // (2) // arguments 是 trigger 时带上的参数
                }
            }
        };
    全局的发布－ 订阅对象
        var Event = (function(){
            var clientList = {},
            listen,
            trigger,
            remove;
            listen = function( key, fn ){
                if ( !clientList[ key ] ){
                    clientList[ key ] = [];
                }
                clientList[ key ].push( fn );
            };
            trigger = function(){
                var key = Array.prototype.shift.call( arguments ),
                    fns = clientList[ key ];
                if ( !fns || fns.length === 0 ){
                    return false;
                }
                for( var i = 0, fn; fn = fns[ i++ ]; ){
                    fn.apply( this, arguments );
                }
            };
            remove = function( key, fn ){
                var fns = clientList[ key ];
                if ( !fns ){
                    return false;
                }
                if ( !fn ){
                    fns && ( fns.length = 0 );
                }else{
                    for ( var l = fns.length - 1; l >=0; l-- ){
                        var _fn = fns[ l ];
                        if ( _fn === fn ){
                            fns.splice( l, 1 );
                        }
                    }
                }
            };
            return {
                listen: listen,
                trigger: trigger,
                remove: remove
            }
        })();
        Event.listen( 'squareMeter88', function( price ){ // 小红订阅消息
        console.log( '价格= ' + price ); // 输出： '价格=2000000'
        });
        Event.trigger( 'squareMeter88', 2000000 ); // 售楼处发布消息

命令模式
    命令模式是最简单和优雅的模式之一，命令模式中的命令（command）指的是一个执行某些
    特定事情的指令。
    命令模式最常见的应用场景是：有时候需要向某些对象发送请求，但是并不知道请求的接收
    者是谁，也不知道被请求的操作是什么。此时希望用一种松耦合的方式来设计程序，使得请求发
    送者和请求接收者能够消除彼此之间的耦合关系。  